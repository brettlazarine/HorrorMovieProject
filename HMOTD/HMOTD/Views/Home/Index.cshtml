@page
@model HorrorMovieAPI
@{
    Layout = null;
}
@{
    var TMDbKey = GetKey.GetTMDbKey();
    var movieOfTheDay = HorrorMovieAPI.GetMovieInfo(TMDbKey);
    var movieVideo = HorrorMovieAPI.GetVideo(TMDbKey, movieOfTheDay);
}
<!DOCTYPE html>
<html lang="en-us">
<head>
    <title>Horror Movie of the Day</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Creepster&display=swap" rel="stylesheet">
    <link asp-append-version="true" type="text/css" href="~/css/HorrorStyle.css" rel="stylesheet" />
</head>

<body>
    <div class="image-container">

        <header>
            <a class="nav "href="/movie/index">Horror Movie Db</a>
        </header>
        <main>
            <h1 id="title">Horror Movie of the Day</h1>
            <h2 id="movie-title">@movieOfTheDay.title</h2>
            <h3 id="movie-release">@movieOfTheDay.release_date</h3>
            <img src="@movieOfTheDay.poster_path" title="Movie of the day poster." id="movie-poster"/>
            <p id="movie-overview">@movieOfTheDay.overview</p>
            <h3 id="movie-rating">Movie Rating: @movieOfTheDay.vote_average/10</h3>

            @*beginning of iframe*@
            <div id="player"></div>
            <script>
                // 2. This code loads the IFrame Player API code asynchronously.
                var tag = document.createElement('script');

                tag.src = "https://www.youtube.com/iframe_api";
                var firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

                // 3. This function creates an <iframe> (and YouTube player)
                //    after the API code downloads.

                //make the C# variable available to JS
                var trailer = '@movieVideo'; 

                var player;
                function onYouTubeIframeAPIReady() {
                  player = new YT.Player('player', {
                    height: '390',
                    width: '640',
                    videoId: trailer,
                    playerVars: {
                      'playsinline': 1
                    },
                    events: {
                      'onReady': onPlayerReady,
                      'onStateChange': onPlayerStateChange
                    }
                  });
                }

                // 4. The API will call this function when the video player is ready.
                function onPlayerReady(event) {
                  event.target.playVideo();
                }

                // 5. The API calls this function when the player's state changes.
                //    The function indicates that when playing a video (state=1),
                //    the player should play for six seconds and then stop.
                var done = false;
                function onPlayerStateChange(event) {
                  if (event.data == YT.PlayerState.PLAYING && !done) {
                    //setTimeout(stopVideo, 6000);
                    done = true;
                  }
                }
                function stopVideo() {
                  player.stopVideo();
                }
            </script>

            <br />
            <br />

        </main>
    </div>
</body>

</html>